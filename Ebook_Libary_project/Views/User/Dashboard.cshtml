@using Ebook_Library_Project
@model Ebook_Libary_project.Models.DashboardViewModel


@{

    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="@Url.Content("~/Content/Dashboard.css")" rel="stylesheet" type="text/css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        /* Basic layout styles */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
        }

        .row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -10px;
            align-items: stretch;
            justify-content: space-between;
        }

        .col {
            padding: 10px;
            flex: 1;
            flex-direction: column;
        }
        .sidenav_dash {
            width: 200px;
            float: left;
            padding: 10px;
        }

            .sidenav_dash ul {
                list-style-type: none;
                padding: 0;
            }

            .sidenav_dash li {
                padding: 8px;
                cursor: pointer;
            }

                .sidenav_dash li:hover {
                    background-color: #f0f0f0;
                }

        .forms {
            margin-left: 220px;
            padding: 20px;
        }


        /* Sidebar styles */
        .sidenav_dash {
            width: 25%;
            background-color: white;
            margin-top: 1.6%;
            color: black;
            height: 25%;
            padding: 20px;
            box-sizing: border-box;
            position: sticky; /* Make the sidebar sticky */
            top: 0; /* Stick to the top of the viewport */
        }

            .sidenav_dash h2 {
                color: #0094ff;
                margin-bottom: 20px;
            }

            .sidenav_dash ul {
                list-style-type: none;
                padding: 0;
            }

                .sidenav_dash ul li {
                    margin: 10px 0;
                }

                    .sidenav_dash ul li a {
                        text-decoration: none;
                        color: black;
                        font-size: 18px;
                    }

                        .sidenav_dash ul li a:hover {
                            color: #04AA6D;
                        }

        /* Main content styles */
        .main-content {
            width: 75%;
            padding: 20px;
            box-sizing: border-box;
        }

        .well {
            background-color: white;
            border: 1px solid #ddd;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

            .well h4 {
                margin-top: 0;
            }

        /* Button styles */
        button {
            background-color: #04AA6D;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
        }

            button:hover {
                background-color: #039a5f;
            }

        .stats-box {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 20px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            flex: 1;
        }

            .stats-box h4 {
                margin: 0;
            }

            .stats-box p {
                font-size: 24px;
                font-weight: bold;
                margin: 10px 0 0;
            }

        .stats-box-info {
            background-color: #fff;
            border: 1px solid #ddd;
            padding: 20px;
            text-align: left;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
            flex: 1;
        }

            .stats-box-info h4 {
                margin: 0;
            }

            .stats-box-info p {
                font-size: 24px;
                font-weight: bold;
                margin: 10px 0 0;
            }

        input[type="submit"] {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #0056b3;
            }



        form {
            display: flex;
            flex-direction: column;
            flex-wrap: wrap;
        }

        /*label {
            font-size: 16px;
            margin: 10px 0 5px;
        }*/

        input[type="text"], input[type="number"], input[type="file"], input[type="url"] {
            padding: 8px;
            margin-bottom: 15px;
            font-size: 14px;
            border-radius: 4px;
            border: 1px solid #ddd;
        }



        .error {
            color: red;
            font-size: 14px;
        }

        .horizontal-form {
            gap: 16px;
            flex-direction: row; /* Arrange items horizontally */
            align-items: center; /* Align items vertically in the center */
        }

            .horizontal-form label {
                margin-right: 5px; /* Space between label and input */
            }

            .horizontal-form input {
                flex-grow: 1; /* Make inputs take up available space */
                padding: 5px;
            }

            .horizontal-form button {
                padding: 5px 10px;
            }

        #suggestionList {
            display: block;
            list-style-type: none; /* Remove default bullet points */
            margin: 0;
            padding: 0;
            border: 1px solid #ccc; /* Add a border to make the list stand out */
            max-height: 200px; /* Limit the height to prevent long scrolling */
            overflow-y: auto; /* Add vertical scrolling if the content exceeds max-height */
            background-color: #fff; /* Set a white background for the list */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for better visibility */
        }

            #suggestionList li {
                padding: 10px;
                cursor: pointer;
                border-bottom: 1px solid #eee; /* Separate each item with a thin border */
            }

                #suggestionList li:hover {
                    background-color: #f0f8ff; /* Light blue highlight on hover */
                    color: #007BFF; /* Optional: Change text color on hover */
                }

        #suggestionList_user {
            display: block;
            list-style-type: none; /* Remove default bullet points */
            margin: 0;
            padding: 0;
            border: 1px solid #ccc; /* Add a border to make the list stand out */
            max-height: 200px; /* Limit the height to prevent long scrolling */
            overflow-y: auto; /* Add vertical scrolling if the content exceeds max-height */
            background-color: #fff; /* Set a white background for the list */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for better visibility */
        }

        #suggestionList li {
            padding: 10px;
            cursor: pointer;
            border-bottom: 1px solid #eee; /* Separate each item with a thin border */
        }

            #suggestionList li:hover {
                background-color: #f0f8ff; /* Light blue highlight on hover */
                color: #007BFF; /* Optional: Change text color on hover */
            }

        #borrowed-lists, #user-details {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 20px;
        }

        .list-item {
            cursor: pointer;
            padding: 5px;
            margin: 5px 0;
            background-color: #f0f0f0;
        }

            .list-item:hover {
                background-color: #d9d9d9;
            }

        #dynamic-content {
            border: 1px solid #ccc;
            padding: 10px;
            min-height: 200px;
        }
        #dynamic-content_waitinglist {
            border: 1px solid #ccc;
            padding: 10px;
            min-height: 200px;
        }

        .user-item {
            cursor: pointer;
            padding: 5px;
            margin: 5px 0;
            background-color: #f0f0f0;
            display: flex;
            justify-content: space-between;
        }

            .user-item:hover {
                background-color: #d9d9d9;
            }

        .info {
            margin-bottom: 10px;
        }



        #userDetails {
            display: none;
            margin-top: 20px;
        }

        .stats-box-info h5 {
            margin: 5px 0;
        }

        .user-list {
            list-style-type: none;
            padding: 0;
        }

            .user-list li {
                padding: 10px;
                border: 1px solid #ccc;
                margin-bottom: 10px;
                cursor: pointer;
            }
    </style>
</head>
<body>
    <div class="row">
        <!-- Sidebar -->
        <div class="sidenav_dash">
            <h2>Index</h2>
            <ul>
                @*<li data-target="DashboardForm">Dashboard</li>*@
                <li data-target="Statisticsform">Statistics</li>
                <li data-target="UserManagementForm">User Management</li>
                <li data-target="addBookForm">Add Book</li>
                <li data-target="SearchBookForm">Search Book</li>
                <li data-target="BorrowListForm">Borrow Lists</li>
                <li data-target="WaitingListForm">Waiting Lists</li>
            </ul>

        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="well">
                <form id="DashboardForm">
                    <h4>Dashboard</h4>
                    <p>Welcome to the Dashboard,Here you can change fates and hierarchys.</p>
                    <p>Please Choose wanted option from the Index.</p>
                    <p>Don't Abuse the power in your hands. for only the choosen one may Fix thy broken world of ours.'</p>
                </form>
            </div>
            <form id="Statisticsform">
                <!-- Statistics Row -->
                <div class="row" id="section1">
                    <div class="col">
                        <div class="stats-box">
                            <h4>Amount of Users:</h4>
                            <h4 id="amountusers">Users: Loading...</h4>
                        </div>
                    </div>
                    <div class="col">
                        <div class="stats-box">
                            <h4>Amount of Books:</h4>
                            <h4 id="booksCount">Books: Loading...</h4>
                        </div>
                    </div>
                    <div class="col">
                        <div class="stats-box">
                            <h4>Amount purchased books: </h4>
                            <h4 id="PurchasedCount">Books: Loading...</h4>
                        </div>
                    </div>
                    <div class="col">
                        <div class="stats-box">
                            <h4>Amount of Borrowed Books: </h4>
                            <h4 id="BorrowedCount">Books: Loading...</h4>
                        </div>
                    </div>
                    <div class="col">
                        <div class="stats-box">
                            <h4>Amount of Waiting Lists:</h4>
                            <h4 id="WaitingCount">Books: Loading...</h4>
                        </div>
                    </div>
                </div>
            </form>
           
            <form id="UserManagementForm" style="display: none;">
                <h2 id="Usermanagment">Users Managment</h2>
                <h2>Search and Manage Users</h2>
                <div class="well" id="user_pick">
                    <!-- Dynamic Search for Users -->
                    <label for="searchUser">Search Users:</label>
                    <input type="text" id="searchUser" name="searchUser" placeholder="Enter username" autocomplete="off">
                    <div id="suggestionList_user" style="margin-top: 10px;">
                        <ul id="userList" class="user-list"></ul>
                    </div>
                </div>

                <!-- User's Details -->
                <div class="well" id="userDetails">
                    <h2>User's Details:</h2>
                    <div class="stats-box-info">
                        <h5 style="display: none;">Username: @ViewBag.Username <span id="username"></span></h5>
                        <h5 style="display: none;">Email: @ViewBag.Email <span id="email"></span></h5>
                        <h5 style="display: none;">Amount of Books Borrowed: @ViewBag.BorrowedBooks <span id="booksBorrowed"></span></h5>
                        <h5 style="display: none;">Amount of Books Purchased: @ViewBag.PurchasedBooks <span id="booksPurchased"></span></h5>
                        <h5 style="display: none;">Admin Privileges: <span id="isAdmin"></span></h5>
                        <button id="grantAdminButton" style="display: none;">Grant Admin Privileges</button>
                        <button id="showBorrowedBooks" style="display: none;">Show Borrowed Books</button>
                        <button id="showPurchasedBooks" style="display: none;">Show Purchased Books</button>
                        <button id="removeUserButton" style="display: none;">Remove User</button>
                        <button id="backToUserList" sstyle="display: none;">Back to User List</button>
                    </div>
                </div>
            </form>
            <form id="addBookForm" style="display: flex; flex-wrap: wrap; gap: 10px;" enctype="multipart/form-data">
                <div class="well">
                    <div class="row">
                        <div class="col" style="padding: 15px;">

                            <div style="display: flex; align-items: center; gap: 10px; width: 100%;">
                                <!-- First row: Title and Author -->
                                <div style="flex: 1;">
                                    <label for="title" style="min-width: 80px;">Title:</label>
                                    <input type="text" id="title" name="title" required style="width: 100%;">
                                </div>
                                <div style="flex: 1;">
                                    <label for="author" style="min-width: 80px;">Author:</label>
                                    <input type="text" id="author" name="author" required style="width: 100%;">
                                </div>
                            </div>
                            <div style="flex: 1;">
                                <label for="image" style="min-width: 80px;">Image File:</label>
                                <input type="file" id="image" name="image" accept="image/*" required />
                            </div>
                        </div>

                            <div style="display: flex; align-items: center; gap: 10px; width: 100%;">
                                <!-- Second row: Buy Price, Borrow Price, and Age -->
                                <div style="flex: 1;">
                                    <label for="bookage" style="min-width: 80px;">Age:</label>
                                    <input type="number" id="bookage" name="bookage" required style="width: 100%;">
                                </div>
                                <div style="flex: 1;">
                                    <label for="buyPrice" style="min-width: 80px;">Buy Price ($):</label>
                                    <input type="number" id="buyPrice" name="buyPrice" required step="0.01" style="width: 100%;">
                                </div>
                                <div style="flex: 1;">
                                    <label for="borrowPrice" style="min-width: 80px;">Borrow Price ($):</label>
                                    <input type="number" id="borrowPrice" name="borrowPrice" required step="0.01" style="width: 100%;">
                                </div>
                            </div>

                            <div style="display: flex; align-items: center; gap: 10px; width: 100%;">
                                <!-- Third row: Copies and Image File -->
                                <div style="flex: 1;">
                                    <label for="copies" style="min-width: 80px;">In-stock:</label>
                                    <input type="number" id="copies" name="copies" required min="0" style="width: 100%;">
                                </div>
                                <div style="flex: 1;">
                                    <label for="image" style="min-width: 80px;">Image File:</label>
                                    <input type="file" id="image" name="image" accept="image/*" required />
                                </div>
                            </div>

                            <div style="display: flex; justify-content: space-between; width: 100%; margin-top: 10px;">
                                <!-- Submit button and Book File -->
                                <div style="flex: 1;">
                                    <label for="file" style="min-width: 80px;">Book File:</label>
                                    <input type="file" id="file" name="file" accept=".pdf, .epub, .mobi" style="width: 100%;">
                                </div>
                                <div style="flex: 1;">
                                    <input type="submit" value="Add Book" style="padding: 5px 10px;">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form> 
            <form id="SearchBookForm" style="display: none;">
                <h2 id="search_books">Search Books</h2>
                <div class="well">
                    <div class="row">
                        <div class="col" padding: 15px;">
                            <div class="container">
                                <div class="well">
                                    <div class="row">
                                        <div class="col" style="padding: 15px;">
                                            <form id="searchBookForm" class="horizontal-form">
                                                <label for="search">Search Book:</label>
                                                <input type="text" id="search" name="search" placeholder="Enter book title or ID" required autocomplete="off">
                                            </form>
                                            <div>
                                                <ul id="suggestionList"></ul>
                                            </div>
                                            <div id="searchResults" style="margin-top: 20px; display: none;">
                                                <h3>Search Results:</h3>
                                                <p><strong>Image:</strong> <img id="bookImage" alt="Book Cover" style="max-width: 100px; max-height: 150px;" onerror="this.src='https://via.placeholder.com/100x150?text=No+Image';"></p>
                                                <p><strong>Id:</strong> <span id="bookId"></span></p>
                                                <p><strong>Title:</strong> <span id="bookTitle"></span></p>
                                                <p><strong>Author:</strong> <span id="bookAuthor"></span></p>
                                                <p><strong>Buying Price:</strong> $<span id="buying_bookPrice"></span></p>
                                                <p><strong>Borrow Price:</strong> $<span id="borrow_bookPrice"></span></p>
                                                <p id="saleSection" style="display: none;">
                                                    <strong>Sale:</strong> <span id="sale_percentage"></span>%
                                                </p>


                                                <hr>

                                                <!-- Update Buy Price -->
                                                <label for="newBuyPrice">Change Buy Price:</label>
                                                <input type="number" id="newBuyPrice" placeholder="Enter new buying price" style="margin-bottom: 10px;">
                                                <button id="updateBuyPriceButton" style="background-color: green; color: white; padding: 10px; border: none; cursor: pointer;">Update Buy Price</button>

                                                <br><br>

                                                <!-- Update Borrow Price -->
                                                <label for="newBorrowPrice">Change Borrow Price:</label>
                                                <input type="number" id="newBorrowPrice" placeholder="Enter new borrow price" style="margin-bottom: 10px;">
                                                <button id="updateBorrowPriceButton" style="background-color: blue; color: white; padding: 10px; border: none; cursor: pointer;">Update Borrow Price</button>

                                                <br><br>

                                                <!-- Update Sale Price -->
                                                <label for="newSalePrice">Change Sale Price:</label>
                                                <input type="number" id="newSalePrice" placeholder="Enter new sale price" style="margin-bottom: 10px;">
                                                <button id="updateSalePriceButton" style="background-color: orange; color: white; padding: 10px; border: none; cursor: pointer;">Update Sale Price</button>
                                            </div>
                                            <!-- Delete Book Button -->
                                            <button id="deleteBookButton" style="background-color: red; color: white; padding: 10px; border: none; cursor: pointer; display: none;">Delete Book</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            
            <form id="BorrowListForm" style="display: none;">
                <h1 id="borrow_list">Active Borrowed Lists</h1>
                <div class="well">
                    <div class="row">
                        <div class="col" padding: 15px;">
                            <!-- Dynamic content container -->
                            <div id="dynamic-content">
                                <h2>Users in borrowed lists:</h2>
                                <p>Loading borrowed lists...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
            <form id="WaitingListForm" style="display: none;">
                <h1 id="waiting_list">Active Watiting Lists</h1>
                <div class="well">
                    <div class="row">
                        <div class="col" padding: 15px;">
                            <!-- Dynamic content container -->
                            <div id="dynamic-content_waitinglist">
                                <h2>Books with Waiting lists:</h2>
                                <p>Loading Waiting lists...</p>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>

    </div>

</body>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Get all the li elements and forms
        const listItems = document.querySelectorAll('.sidenav_dash li');
        const forms = document.querySelectorAll('.main-content form');
            const dashboardForm = document.getElementById('DashboardForm');

        // Check if the listItems exists
        if (listItems.length > 0) {
            listItems.forEach(item => {
                item.addEventListener('click', function () {
                    // Get the target form ID from the clicked li item
                    const targetId = this.getAttribute('data-target');
                    const targetForm = document.getElementById(targetId);

                    // Hide all forms
                    forms.forEach(form => {
                        if (form !== dashboardForm)
                            form.style.display = 'none';
                    });

                    // Show the target form
                    if (targetForm) {
                        targetForm.style.display = 'block';
                    }
                });
            });
        } else {
            console.error("No list items found.");
        }

        // Check if forms exist
        if (forms.length === 0) {
            console.error("No forms found.");
        }
    });


    let wanteduser = null;
    let nameuser = null;

    //Waiting List
    // Function to display all users with borrowed time
    function loadBooksWithWaiting() {
        const dynamicContent = document.getElementById('dynamic-content_waitinglist');
        dynamicContent.innerHTML = '<h2>Books with Waiting Lists: </h2>';

        // Make the AJAX request to fetch the users
        fetch('/Dashboard/GetbooksforWaiting')
            .then(response => response.json()) // 
            .then(BooksWithWaiting => {
                // Iterate over the fetched data and create elements
                BooksWithWaiting.forEach(book => {
                    const bookitem = document.createElement('div');
                    bookitem.className = 'book-item';
                    bookitem.innerHTML = `
                <span>${book.Name}</span>
                <span>List length is: ${book.length} </span>
            `;
                    bookitem.onclick = () => showUserBooks_waiting(book);
                    dynamicContent.appendChild(bookitem);
                });
            })
            .catch(error => {
                console.error('Error fetching Books with Waiting Lists:', error);
                dynamicContent.innerHTML = '<p>Failed to load Books with Waiting Lists.</p>';
            });

    }

    function showUserBooks_waiting(book) {
        const dynamicContent = document.getElementById('dynamic-content_waitinglist');
        dynamicContent.innerHTML = `<h2>User in ${book.name} Waiting List:</h2>`;

        // Make an AJAX POST request to fetch books borrowed by the user
        $.ajax({
            url: '/Dashboard/getusersofwaitinglist',
            type: 'POST',
            data: { bookid: book.BookID },
            success: function (response) {
                console.log(response.length);

                if (response.length > 0) {
                    response.forEach(user => {
                        const bookItem = document.createElement('div');
                        bookItem.className = 'book-item';
                        bookItem.innerHTML = `
                <span>${user.Name}</span>
                <span>Number in queue: ${user.queue}</span>
            `;
                        bookItem.onclick = () => Showuser_in_listdetails(book, user); // When a book is clicked, show its details
                        dynamicContent.appendChild(bookItem);
                    });

                    // Add a "Back to Books" button
                    const backButton = document.createElement('button');
                    backButton.textContent = 'Back to Books';
                    backButton.onclick = loadBooksWithWaiting;
                    dynamicContent.appendChild(backButton);
                } else {
                    dynamicContent.innerHTML += '<p>No borrowed books found for this user.</p>';
                }
            },
            error: function (error) { // Use 'error' callback to handle errors
                console.error('Error fetching Waitinglists books:', error);
                dynamicContent.innerHTML += '<p>There was an error fetching the Lists books.</p>';
            }
        });
    }




    function Showuser_in_listdetails(book, user) {
        const dynamicContent = document.getElementById('dynamic-content_waitinglist');
        dynamicContent.innerHTML = `
        <p>Book: ${book.Name}</p>
        <p>User: ${user.Name} </p>
        

        <div>
            <p>Number in Queue: ${user.queue}</p>
        </div>
        <button id="Removefromlist-button" style="background-color: red; color: white; padding: 10px; border: none; cursor: pointer; display: block;">Remove from list</button>
        <button id="back-to-Users">Back to Users</button>
    `;

        // Now, attach the event handler for 'Remove from list' button
        document.getElementById('Removefromlist-button').onclick = () => {
            $.ajax({
                url: '/Dashboard/RemoveFromWaitingListAndUpdateQueue',
                type: 'POST',
                data: {
                    bookId: book.BookID ,    // The user ID
                    userId: user.UserID,    // The book ID 
                },
                success: function (response) {
                    if (response.success) {
                        alert('User was Removed from list.');
                        loadBooksWithWaiting();
                        
                    } else {
                        alert('Failed to Remove User.');
                    }
                },
                error: function (error) {
                    console.error('Error updating List:', error);
                    alert('There was an error updating the List.');
                }
            });
        };

        // Back to books button
        document.getElementById('back-to-Users').onclick = () => {
            showUserBooks_waiting(book); // Reload books for the user
        };
    }



    //borrowed lists
    // Function to display all users with borrowed time
    function loadUsersWithBorrowedTime() {
        const dynamicContent = document.getElementById('dynamic-content');
        dynamicContent.innerHTML = '<h2>Users with Borrowed Books:</h2>';

        // Make the AJAX request to fetch the users
        fetch('/Dashboard/GetUsers_who_borrowed') // Replace with your API URL
            .then(response => response.json()) // Parse the JSON response
            .then(usersWithBorrowedTime => {
                // Iterate over the fetched data and create elements
                usersWithBorrowedTime.forEach(user => {
                    const userItem = document.createElement('div');
                    userItem.className = 'user-item';
                    userItem.innerHTML = `
                    <span>${user.Name}</span>
                    <span>${user.DaysLeft} days left for Borrowed time</span>
                `;
                    userItem.onclick = () => showUserBooks(user);
                    dynamicContent.appendChild(userItem);
                });
            })
            .catch(error => {
                console.error('Error fetching users with borrowed time:', error);
                dynamicContent.innerHTML = '<p>Failed to load users with borrowed books.</p>';
            });
    }


    function showUserBooks(user) {
        const dynamicContent = document.getElementById('dynamic-content');
        dynamicContent.innerHTML = `<h2>Books Borrowed by ${user.UserID}:</h2>`;

        // Make an AJAX POST request to fetch books borrowed by the user
        $.ajax({
            url: '/Dashboard/get_users_borrowed_books',
            type: 'POST',
            data: { userid: user.UserID },
            success: function (response) {
                console.log(response.length);

                if (response.length > 0) {
                    response.forEach(book => {
                        const bookItem = document.createElement('div');
                        bookItem.className = 'book-item';
                        bookItem.innerHTML = `
                    <span>${book.Title}</span>
                    <span>${book.ReturnDate} days left</span>
                `;
                        bookItem.onclick = () => showBookDetails(book, user); // When a book is clicked, show its details
                        dynamicContent.appendChild(bookItem);
                    });

                    // Add a "Back to Users" button
                    const backButton = document.createElement('button');
                    backButton.textContent = 'Back to Users';
                    backButton.onclick = loadUsersWithBorrowedTime;
                    dynamicContent.appendChild(backButton);
                } else {
                    dynamicContent.innerHTML += '<p>No borrowed books found for this user.</p>';
                }
            },
            error: function (error) { // Use 'error' callback to handle errors
                console.error('Error fetching borrowed books:', error);
                dynamicContent.innerHTML += '<p>There was an error fetching the borrowed books.</p>';
            }
        });
    }




    function showBookDetails(book, user) {
        const dynamicContent = document.getElementById('dynamic-content');
        dynamicContent.innerHTML = `
        <p>Book: ${book.Title}</p>
        <p>Days Left: ${book.ReturnDate} days</p>

        <div>
            <label>
                <input type="radio" name="action" value="extend" id="action-extend">
                Extend Borrowed Time
            </label>
            <label>
                <input type="radio" name="action" value="decrease" id="action-decrease">
                Decrease Borrowed Time
            </label>
        </div>

        <div id="extend-box" style="display: none;">
            <label for="extend-time">Extend Borrowed Time (in days):</label>
            <input type="number" id="extend-time" value="0" min="0">
        </div>

        <div id="decrease-box" style="display: none;">
            <label for="decrease-time">Decrease Borrowed Time (in days):</label>
            <input type="number" id="decrease-time" value="0" min="0">
        </div>

        <p class="info">Total Borrowed Time (after changes): <span id="total-time">${book.ReturnDate}</span> days</p>

        <button id="save-button">Save</button>
        <button id="back-to-books">Back to Books</button>
    `;

        // Add event listeners for the radio buttons
        const actionExtend = document.getElementById('action-extend');
        const actionDecrease = document.getElementById('action-decrease');
        const extendBox = document.getElementById('extend-box');
        const decreaseBox = document.getElementById('decrease-box');
        const extendTimeInput = document.getElementById('extend-time');
        const decreaseTimeInput = document.getElementById('decrease-time');
        const totalTime = document.getElementById('total-time');


        actionExtend.addEventListener('change', () => {
            if (actionExtend.checked) {
                extendBox.style.display = 'block';
                decreaseBox.style.display = 'none';
            }
        });

        actionDecrease.addEventListener('change', () => {
            if (actionDecrease.checked) {
                decreaseBox.style.display = 'block';
                extendBox.style.display = 'none';
            }
        });




        // Update the total borrowed time when either extension or decrease value changes
        // Function to update the total borrowed time when inputs change
        function updateTotalTime() {
            const extendTime = parseInt(extendTimeInput.value || "0", 10); // Default to 0 if empty
            const decreaseTime = parseInt(decreaseTimeInput.value || "0", 10); // Default to 0 if empty
            console.log("Extend", extendTime);
            console.log("dec", decreaseTime);
            console.log(book.ReturnDate)
            // Calculate new total time
            const newTotalTime = book.ReturnDate + extendTime - decreaseTime;

            // Update the displayed total time (ensure it doesn't go below 0)

            totalTime.textContent = newTotalTime < 0 ? 0 : newTotalTime;
        }

        // Attach the event listeners for inputs
        extendTimeInput.addEventListener('input', updateTotalTime);
        decreaseTimeInput.addEventListener('input', updateTotalTime);


        document.getElementById('save-button').onclick = () => {
            const extendDays = parseInt(extendTimeInput.value || "0", 10);
            const decreaseDays = parseInt(decreaseTimeInput.value || "0", 10);
            let newBorrowedTime = book.ReturnDate + extendDays - decreaseDays;
            let action = "decrease";
            if (extendDays > 0) {
                action = "extend";
            }

            if (newBorrowedTime < 0) {
                alert("The borrowed time cannot be negative.");
                newBorrowedTime = 0; // If it goes negative, set it to 0
            }



            // Send the updated borrowed time to the backend via AJAX POST request
            $.ajax({
                url: '/Dashboard/UpdateBorrowedTime', // Backend endpoint
                type: 'POST',
                data: {
                    userId: user.UserID,    // The user ID
                    bookId: book.BookId,    // The book ID
                    amount_of_days: newBorrowedTime, // The new borrowed time
                    action: action
                },
                success: function (response) {
                    if (response.success) {
                        alert('Borrowed time updated successfully.');
                        extendTimeInput.value = "";
                        decreaseTimeInput.value = "";
                        book.ReturnDate = newBorrowedTime;
                        location.reload()// Update the book's borrowedDaysLeft
                    } else {
                        alert('Failed to update borrowed time.');
                    }
                },
                error: function (error) {
                    console.error('Error updating borrowed time:', error);
                    alert('There was an error updating the borrowed time.');
                }
            });
        };

        // Back to books button
        document.getElementById('back-to-books').onclick = () => {
            showUserBooks(user); // Reload books for the user
        };
    }






    window.onload = () => {
        loadUsersWithBorrowedTime();
        loadBooksWithWaiting();
    };

    // Function to display user details based on userId Search
    function showUserDetails(userId) {
        // Hide the user list and show user details
        document.getElementById("userList").style.display = "none";
        document.getElementById("user_pick").style.display = "none";
        document.getElementById("userDetails").style.display = "block";
        console.log(userId);

        // AJAX request to get user details by userId
        $.ajax({
            url: '/Dashboard/GetUserDetails',
            type: 'GET',
            data: { userId: userId }, // Pass userId to the controller
            success: function (response) {
                console.log(response);
                // Update the user details section with the HTML content returned by the server
                document.getElementById("userDetails").innerHTML = response;
            },
            error: function (error) {
                console.log("Error fetching user details: ", error);
            }
        });
    }


    function displayUserList(searchTerm) {
        const userList = document.getElementById("userList");

        // Clear existing list
        userList.innerHTML = '';

        // Make AJAX call to get users from the server based on the search term
        $.ajax({
            url: '/Dashboard/SearchUsers',
            type: 'GET',
            data: { searchTerm: searchTerm },
            success: function (response) {
                // If the response contains users, display them
                response.forEach(user => {
                    const listItem = document.createElement("li");
                    listItem.textContent = `${user.Username} (${user.Id})`;
                    //console.log(user);
                    listItem.onclick = () => {
                        wanteduser = user.Id; // Save the selected user ID
                        nameuser = user.Username;
                        console.log(`Selected user ID: ${wanteduser}`);
                        showUserDetails(user.Id); // Show user details on click
                    };
                    userList.appendChild(listItem);
                });

                // Handle if no users are found
                if (response.length === 0) {
                    const noResultsItem = document.createElement("li");
                    noResultsItem.textContent = "No users found";
                    userList.appendChild(noResultsItem);
                }
            },
            error: function (error) {
                console.log("Error fetching users: ", error);
            }
        });
    }

    // Event listener for dynamic search
    document.getElementById("searchUser").addEventListener("input", (event) => {
        const searchTerm = event.target.value;  // Get the search term from the input field
        displayUserList(searchTerm);  // Call the function to display the filtered users

    });
    document.addEventListener("click", (event) => {
        if (event.target && event.target.id === "backToUserList") {
            console.log("Back to User List button clicked");

            // Show the user list container
            document.getElementById("user_pick").style.display = "block";
            document.getElementById("userList").style.display = "block";

            // Hide the user details container
            document.getElementById("userDetails").style.display = "none";

            // Clear the search input field
            document.getElementById("searchUser").value = "";

            // Reload the user list with no search term
            displayUserList('');
        }
    });

    //Removing User.
    document.addEventListener("click", (event) => {
        if (event.target && event.target.id === "removeUserButton") {
            // Assuming `userId` is available or passed dynamically

            if (wanteduser == null) {
                console.error("User ID is not provided!");
                return;
            }

            if (!confirm(`Are you sure you want to remove this user:${nameuser} ?`)) {
                return;
            }
            console.log(wanteduser)
            $.ajax({
                url: `/Dashboard/DeleteUser`,
                type: 'POST',
                data: ({ Id: wanteduser }),
                success: function (response) {
                    console.log("User deleted successfully:", response);

                    // Optionally: Display a success message
                    alert("User has been removed successfully!");

                    // Optionally: Refresh the user list or navigate back
                    document.getElementById("backToUserList").click(); // Simulate clicking the back button
                },
                error: function (error) {
                    console.error("Error deleting user:", error);

                    // Display an error message
                    alert("Failed to delete the user. Please try again.");
                }
            });
        }
    });

    //Making an admin
    document.addEventListener("click", (event) => {
        if (event.target && event.target.id === "grantAdminButton") {
            // Assuming userId is available in a data attribute

            console.log(wanteduser);
            if (wanteduser == null) {
                console.error("User ID is not provided!");
                return;
            }
            if (!confirm("Are you sure you want to grant admin privileges to this user: " + nameuser + "?")) {
                return;
            }

            // AJAX POST request
            $.ajax({
                url: '/Dashboard/GrantAdmin',
                type: 'POST',
                data: ({ userId: wanteduser }),
                success: function (response) {
                    if (response.success) {
                        alert("Admin privileges have been granted successfully!");
                        document.getElementById("grantAdminButton").disabled = true; // Disable button
                    } else {
                        alert(response.message || "Failed to grant admin privileges.");
                    }
                },
                error: function (error) {
                    console.error("Error granting admin privileges:", error);
                    alert("Failed to grant admin privileges. Please try again.");
                }
            });
        }
    });

    //Books managments!!!
    //add Book

    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('addBookForm');

        form.addEventListener('submit', function (event) {
            event.preventDefault(); // Prevent form submission
            const formData = new FormData();

            const title = document.getElementById('title').value;
            const author = document.getElementById('author').value; 

            const buyPrice = parseFloat(document.getElementById('buyPrice').value);
            const borrowPrice = parseFloat(document.getElementById('borrowPrice').value);
            const copies = parseInt(document.getElementById('copies').value);
            const age = parseInt(document.getElementById('bookage').value);
            const imageFile = document.getElementById('image').files[0]; // Get the image file
            const bookFile = document.getElementById('file').files[0]; // Get the book file

            if (imageFile) {
                formData.append('imageFile', imageFile);
            }
            if (bookFile) {
                formData.append('bookFile', bookFile);
            }
            
            // Append form data
            formData.append('title', title);
            formData.append('author', author);
            formData.append('buyPrice', buyPrice);
            formData.append('borrowPrice', borrowPrice);
            formData.append('availableCopies', copies);
            formData.append('age', age);

            if (imageFile) {
                formData.append('imageFile', imageFile);
            }
            if (bookFile) {
                formData.append('bookFile', bookFile);
            }
           
            $.ajax({
                url: '/Dashboard/Addingbook',
                type: 'POST',
                data: formData,
                contentType: false, // Set contentType to false to allow the FormData to set its own headers
                processData: false, // Prevent jQuery from automatically processing the data
                success: function (response) {
                    if (response.success) {
                        alert('Book added successfully!');
                        form.reset(); // Reset the form fields
                        location.reload();
                    } else {
                        alert(response.message || "Failed to add book.");
                    }
                },
                error: function (error) {
                    console.error("Error adding book:", error);
                    alert("Failed to add book. Please try again.");
                }
            });
        });
    });




    $(document).ready(function () {
        //style
        const saleSection = document.getElementById("saleSection");
        const saleBookPriceElement = document.getElementById("sale_bookPrice");
        const salePercentageElement = document.getElementById("sale_percentage");

        //values
        const searchInput = $("#search");
        const suggestionList = $("#suggestionList");
        const searchResults = $("#searchResults");
        const bookImage = $("#bookImage");
        const bookId = $("#bookId");
        const bookTitle = $("#bookTitle");
        const bookAuthor = $("#bookAuthor");
        const buyingBookPrice = $("#buying_bookPrice");
        const borrowBookPrice = $("#borrow_bookPrice");
        const saleprec = $("#sale_percentage");
        const newPriceInput = $("#newPrice");
        const newBuyPriceInput = $("#newBuyPrice");
        const newBorrowPriceInput = $("#newBorrowPrice");
        const newSalePriceInput = $("#newSalePrice");
        const updatePriceButton = $("#updatePriceButton");
        const updateBuyPriceButton = $("#updateBuyPriceButton");
        const updateBorrowPriceButton = $("#updateBorrowPriceButton");
        const updateSalePriceButton = $("#updateSalePriceButton");
        const deleteButton = $("#deleteBookButton");

        // Event listener for the search input
        searchInput.on("input", function () {
            const query = $(this).val().trim();

            if (query) {
                $.ajax({
                    url: "/Dashboard/SearchBooks",
                    type: "GET",
                    data: { searchTerm: query },
                    success: function (data) {
                        suggestionList.empty(); // Clear previous suggestions

                        if (data.length === 0) {
                            suggestionList.append("<li>No results found</li>");
                            return;
                        }

                        data.forEach(book => {
                            const listItem = $("<li></li>")
                                .text(`${book.Title} by ${book.Author}`)
                                .data("bookId", book.Id)
                                .data("buyingPrice", book.Buyingprice)
                                .data("borrowPrice", book.BorrowPrice)
                                .data("salePrice", book.Sale)
                                .data("bookImageUrl", book.ImageUrl)
                                .on("click", function () {
                                    // Populate book details
                                    bookId.text(book.Id);
                                    bookTitle.text(book.Title);
                                    bookAuthor.text(book.Author);
                                    buyingBookPrice.text(parseFloat(book.Buyingprice).toFixed(2));
                                    borrowBookPrice.text(parseFloat(book.BorrowPrice).toFixed(2));
                                    if (book.Sale > 0) {
                                        salePercentageElement.style.display = "inline";
                                        saleSection.style.display = "block";

                                        saleprec.text(parseInt(book.Sale));
                                    }
                                    bookImage.attr(
                                        "src",
                                        book.ImagePath || "https://via.placeholder.com/100x150?text=No+Image"
                                    );

                                    // Show search results and delete button
                                    searchResults.show();
                                    deleteButton.show();

                                    // Clear suggestions and input
                                    suggestionList.empty();
                                    searchInput.val("");
                                });
                            suggestionList.append(listItem);
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error("Error fetching books:", error);
                    }
                });
            } else {
                suggestionList.empty(); // Clear suggestions if the query is empty
            }
        });



        // Handle update buying
        updateBuyPriceButton.on("click", function () {
            const bookIdValue = bookId.text();
            const newBuyPrice = parseFloat(newBuyPriceInput.val());
            if (!isNaN(newBuyPrice) && newBuyPrice > 0.0) {
                $.ajax({
                    url: "/Dashboard/updateprice",
                    type: "POST",
                    data: {
                        bookId: bookIdValue, newPrice: newBuyPrice, action: "BuyPrice"
                    },
                    success: function (data) {
                        if (data.success) {
                            alert("Price updated successfully!");
                            buyingBookPrice.text(newBuyPrice.toFixed(2)); // Update displayed buying price
                            newBuyPriceInput.val("");
                            newBorrowPriceInput.val("");// Clear input.
                            location.reload();
                        } else {
                            alert(`Failed to update buying price: ${data.errorMessage || "Unknown error occurred"}`)
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating buying price:", error);
                    }
                });
            }
            else {
                alert("Please enter a valid  price.");
            }
        });

        // handle borrowing price button
        updateBorrowPriceButton.on("click", function () {
            const bookIdValue = bookId.text();
            const newborrowPrice = parseFloat(newBorrowPriceInput.val());
            console.log(newborrowPrice);

            if (!isNaN(newborrowPrice) && newborrowPrice > 0.0) {
                console.log("WLL");
                $.ajax({
                    url: "/Dashboard/updateprice",
                    type: "POST",
                    data: {
                        bookId: bookIdValue, newPrice: newborrowPrice, action: "BorrowPrice"
                    },
                    success: function (data) {
                        if (data.success) {
                            alert("Price updated successfully!");
                            borrowBookPrice.text(newborrowPrice.toFixed(2)); // Update displayed buying price
                            newBorrowPriceInput.val("");// Clear input
                            location.reload();
                        } else {
                            alert(`Failed to update buying price: ${data.errorMessage || "Unknown error occurred"}`)
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating buying price:", error);
                    }
                });
            }
            else {
                alert("Please enter a valid  price.");
            }
        });



        // Handle update sale price button
        updateSalePriceButton.on("click", function () {
            const bookIdValue = bookId.text();
            const newSalePrice = parseFloat(newSalePriceInput.val());

            if (!isNaN(newSalePrice) && newSalePrice > 0) {
                $.ajax({
                    url: "/Dashboard/saleprecent",
                    type: "POST",
                    data: { bookId: bookIdValue, sale: newSalePrice },
                    success: function (data) {
                        if (data.success) {
                            alert("Sale price updated successfully!");

                            newSalePriceInput.val(""); // Clear input
                            location.reload();

                        } else {
                            alert(`Failed to update sale price: ${data.errorMessage || "Unknown error occurred"}`)
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error updating sale price:", error);
                    }
                });
            } else {
                alert("Please enter a valid sale price.");
            }
        });


        //Handle delete button
        deleteButton.on("click", function () {
            const bookIdValue = bookId.text();
            const bookTitleValue = bookTitle.text();

            if (confirm(`Are you sure you want to delete "${bookTitleValue}"?`)) {
                $.ajax({
                    url: "/Dashboard/Deletebook",
                    type: "POST",
                    data: { bookId: bookIdValue },
                    success: function (data) {
                        if (data.success) {
                            alert(`"${bookTitleValue}" has been deleted.`);
                            searchResults.hide(); // Hide results
                            deleteButton.hide(); // Hide delete button
                            location.reload();

                        } else {
                            alert(`Failed to Remove: ${data.errorMessage || "Unknown error occurred"}`)
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("Error deleting book:", error);
                    }
                });
            }

        });

    })
    //statics
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch the books count when the page is loaded
        fetch('/Dashboard/amountof_books')  // Replace with your API endpoint
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the h4 tag to display the number of books
                    document.getElementById('booksCount').innerText = 'Amount of Books: ' + data.count;
                } else {
                    document.getElementById('booksCount').innerText = 'Books: Error loading data';
                }
            })
            .catch(error => {
                console.error("Error fetching book count:", error);
                document.getElementById('booksCount').innerText = 'Books: Error loading data';
            });
    });

    //amount of users
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch the books count when the page is loaded
        fetch('/Dashboard/amountof_users')  
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the h4 tag to display the number of books
                    document.getElementById('amountusers').innerText = 'Amount of Users: ' + data.count;
                } else {
                    document.getElementById('amountusers').innerText = 'Users: Error loading data';
                }
            })
            .catch(error => {
                console.error("Error fetching Users count:", error);
                document.getElementById('amountusers').innerText = 'Users: Error loading data';
            });
    });
    //amount of purchased.
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch the books count when the page is loaded
        fetch('/Dashboard/Purchasedamount')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the h4 tag to display the number of books
                    document.getElementById('PurchasedCount').innerText = '' + data.count;
                } else {
                    document.getElementById('PurchasedCount').innerText = 'PurchasedCount: Error loading data';
                }
            })
            .catch(error => {
                console.error("Error fetching PurchasedCount :", error);
                document.getElementById('PurchasedCount').innerText = 'PurchasedCount: Error loading data';
            });
    });
    //BorrowCount
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch the books count when the page is loaded
        fetch('/Dashboard/borrowedamount')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the h4 tag to display the number of books
                    document.getElementById('BorrowedCount').innerText = '' + data.count;
                } else {
                    document.getElementById('BorrowedCount').innerText = 'BorrowedCount: Error loading data';
                }
            })
            .catch(error => {
                console.error("Error fetching BorrowCount :", error);
                document.getElementById('BorrowCount').innerText = 'BorrowCount: Error loading data';
            });
    });
    //WaitingCount
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch the books count when the page is loaded
        fetch('/Dashboard/waitingamount')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the h4 tag to display the number of books
                    document.getElementById('WaitingCount').innerText = ' ' + data.count;
                } else {
                    document.getElementById('WaitingCount').innerText = 'WaitingCount: Error loading data';
                }
            })
            .catch(error => {
                console.error("Error fetching WaitingCount :", error);
                document.getElementById('WaitingCount').innerText = 'WaitingCount: Error loading data';
            });
    });


</script>
</html>
