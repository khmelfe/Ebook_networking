@using Ebook_Libary_project.Models
@using Ebook_Library_Project

@{
    ViewBag.Title = "Ebook Home";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
            background-color: #f4f4f9;
            color: #333;
        }

        .topnav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            background-color: #003366;
            border-radius: 5px;
            color: white;
        }

        .search-filter-container {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }

        .search-container {
            display: flex;
            align-items: center;
            flex: 1;
        }

            .search-container input[type="text"] {
                padding: 10px;
                font-size: 16px;
                border: 2px solid #00509e;
                border-radius: 5px;
                width: 250px;
            }

            .search-container button {
                padding: 10px 15px;
                background-color: #00509e;
                color: white;
                font-size: 16px;
                border: none;
                border-radius: 5px;
                margin-left: 10px;
                cursor: pointer;
            }

                .search-container button:hover {
                    background-color: #003366;
                }

        .filter-bar {
            display: flex;
            gap: 15px;
            align-items: center;
        }

            .filter-bar label {
                font-size: 16px;
                font-weight: bold;
            }

            .filter-bar select {
                padding: 8px;
                border: 2px solid #00509e;
                border-radius: 5px;
                font-size: 14px;
            }

        .btn-primary {
            background-color: #00509e;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }

            .btn-primary:hover {
                background-color: #003366;
            }

        .scrollmenu {
            display: flex;
            overflow-x: auto;
            border: 2px solid #003366;
            padding: 10px;
            white-space: nowrap;
            margin-top: 15px;
        }

            .scrollmenu .column {
                flex: 0 0 auto;
                width: 25%;
                margin-right: 10px;
                background-color: #ffffff;
                padding: 20px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                text-align: center;
                border-radius: 5px;
            }

                .scrollmenu .column h3 {
                    color: #003366;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                }

        .return-date {
            color: #c62828;
            font-weight: bold;
        }

        .login-message {
            font-size: 18px;
            color: #c62828;
            text-align: center;
            margin: 20px 0;
        }

        #suggestionList {
            display: block;
            list-style-type: none; /* Remove default bullet points */
            margin: 0;
            padding: 0;
            border: 1px solid #ccc; /* Add a border to make the list stand out */
            max-height: 200px; /* Limit the height to prevent long scrolling */
            overflow-y: auto; /* Add vertical scrolling if the content exceeds max-height */
            background-color: #fff; /* Set a white background for the list */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow for better visibility */
        }

            #suggestionList li {
                padding: 10px;
                cursor: pointer;
                border-bottom: 1px solid #eee; /* Separate each item with a thin border */
            }

                #suggestionList li:hover {
                    background-color: #f0f8ff; /* Light blue highlight on hover */
                    color: #007BFF; /* Optional: Change text color on hover */
                }

        /* Horizontal Scroll Container */
        .horizontal-scroll {
            display: flex; /* Flexbox for horizontal alignment */
            overflow-x: auto; /* Enable horizontal scrolling */
            gap: 20px; /* Space between items */
            padding: 20px 0; /* Add some padding for better spacing */
            scrollbar-width: thin; /* Style the scrollbar (optional) */
            scrollbar-color: #ccc #f9f9f9;
        }

            /* Hide the scrollbar for better design (optional) */
            .horizontal-scroll::-webkit-scrollbar {
                display: none;
            }

        /* Review Card */
        .review-card {
            flex: 0 0 auto; /* Prevent cards from shrinking */
            width: 250px; /* Set a fixed width for cards */
            background: #ffffff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 10px;
            padding: 20px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
        }

            /* Review Card Image */
            .review-card img {
                width: 80px;
                height: 80px;
                border-radius: 50%; /* Circular images */
                margin-bottom: 15px;
            }

            /* Review Card Text */
            .review-card p {
                font-size: 16px;
                color: #555;
                margin-bottom: 10px;
            }

            /* Review Card Name */
            .review-card h4 {
                font-size: 18px;
                color: #333;
                font-weight: bold;
            }




    </style>
</head>
<body>
    <div class="topnav">
        <div class="search-filter-container">
            <div class="search-container">
                <form id="searchForm" style="display: flex; align-items: center; position: relative;">
                    <input type="text" placeholder="Search books or authors..." name="searchTerm" id="searchInput" autocomplete="off">
                    <button type="submit" style="border: none; background: none;" id="searchButton">
                        <img src="/Content/Images/search-bar-01.png" alt="Search" style="height: 30px; cursor: pointer;">
                    </button>
                </form>
            </div>

            <div class="filter-bar">
                <form id="filterForm" style="display: flex; align-items: center; gap: 25px;">
                    <label for="genre">Genre:</label>
                    <select name="genre" id="genre">
                        <option value="">All</option>
                        <option value="Romance">Romance</option>
                        <option value="Fiction">Fiction</option>
                        <option value="Classic">Classic</option>
                        <option value="Education">Education</option>
                    </select>

                    <label for="priceOrder">Order by:</label>
                    <select name="priceOrder" id="priceOrder">
                        <option value="none">None</option>
                        <option value="buy-low-to-high">Buying Price: Low to High</option>
                        <option value="buy-high-to-low">Buying Price: High to Low</option>
                        <option value="borrow-low-to-high">Borrow Price: Low to High</option>
                        <option value="borrow-high-to-low">Borrow Price: High to Low</option>
                    </select>


                    <button type="submit" class="btn-primary" id="filterButton">Apply Filters</button>
                </form>
            </div>

        </div>

    </div>

    <h2 style="color: #003366;">Recommended Books</h2>
    <div class="scrollmenu">
        @{
            // Use filtered books if available; otherwise, show all recommended books
            var bookIds = Userdatabase.GetAllBookIds();
            List<BookModel> allb = new List<BookModel>();
            foreach (var bookId in bookIds)
            {
                var book = Userdatabase.GetBookById(bookId);
                if (book != null)
                {
                    allb.Add(book);
                }
            }
            var books = ViewBag.FilteredBooks ?? allb;

            foreach (var book in books)
            {
                <div class="column">
                    <a href="@Url.Action("BookPage", "User", new { id = book.Id })" style="text-decoration: none; color: inherit;">
                        <h3>@book.Name</h3>
                        <p>Author: @book.Author</p>
                        <p>Category: @book.Category</p> <!-- Display Category -->
                        <p>Minimum Age: @book.minage</p> <!-- Display Min Age -->
                        @* Display Buying Price *@
                        @if (book.Sale > 0)
                        {
                            decimal saleFactor = book.Sale / 100m;
                            decimal discountedBuyingPrice = book.BuyingPrice * (1 - saleFactor);

                            <p>
                                <span style="text-decoration: line-through; color: red;">
                                    Buying Price: @book.BuyingPrice.ToString("C")
                                </span>
                            </p>
                            <p>
                                <span style="color: green;">
                                    Discounted Buying Price: @discountedBuyingPrice.ToString("C")
                                </span>
                            </p>
                        }
                        else
                        {
                            <p>Buying Price: @book.BuyingPrice.ToString("C")</p>
                        }

                        @* Display Borrow Price *@
                        @if (book.Sale > 0)
                        {
                            decimal discountedBorrowPrice = book.BorrowPrice * (1 - book.Sale / 100m);
                            <p>
                                <span style="text-decoration: line-through; color: red;">
                                    Borrow Price: @book.BorrowPrice.ToString("C")
                                </span>
                            </p>
                            <p>
                                <span style="color: green;">
                                    Discounted Borrow Price: @discountedBorrowPrice.ToString("C")
                                </span>
                            </p>
                        }
                        else
                        {
                            <p>Borrow Price: @book.BorrowPrice.ToString("C")</p>
                        }
                    </a>
                </div>
            }
        }
    </div>



    @if (ViewBag.Message != null)
    {
        <p class="login-message">@ViewBag.Message</p>
    }
    else
    {
        <h2 style="color: #003366;">Your Bought Books</h2>
        <div class="scrollmenu">
            @if (ViewBag.BoughtBooks != null && ((List<BookModel>)ViewBag.BoughtBooks).Any())
            {
                foreach (var book in (List<BookModel>)ViewBag.BoughtBooks)
                {
                    <div class="column">
                        <div style="text-decoration: none; color: inherit; cursor: default;">
                            <h3>@book.Name</h3>
                            <p>Author: @book.Author</p>

                            <!-- Existing Remove Button -->
                            <button class="btn btn-danger" onclick="confirmRemoveBoughtBook(@book.Id)">Remove</button>

                            <!-- Dropdown for choosing download format -->
                            <div style="margin-top: 10px;">
                                <label for="format-@book.Id">Download Format:</label>
                                <select id="format-@book.Id">
                                    <option value="pdf">PDF</option>
                                    <option value="epub">EPUB</option>
                                    <option value="fb2">FB2</option>
                                    <option value="mobi">MOBI</option>
                                </select>

                            </div>
                            <button class="btn btn-primary" onclick="downloadBook(@book.Id)">Download</button>
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No bought books to display.</p>
            }
        </div>

        <h2 style="color: #003366;">Your Borrowed Books</h2>
        <div class="scrollmenu">
            @if (ViewBag.BorrowedBooks != null && ((List<(BookModel Book, DateTime ReturnDate)>)ViewBag.BorrowedBooks).Any())
            {
                foreach (var borrowed in (List<(BookModel Book, DateTime ReturnDate)>)ViewBag.BorrowedBooks)
                {
                    <div class="column">
                        <div style="text-decoration: none; color: inherit; cursor: default;">
                            <h3>@borrowed.Book.Name</h3>
                            <p>Author: @borrowed.Book.Author</p>
                            <p class="return-date">Return Date: @borrowed.ReturnDate.ToShortDateString()</p>

                            <!-- Existing Return Button -->
                            <button class="btn btn-warning" onclick="confirmReturnBook(@borrowed.Book.Id)">Return</button>

                            <!-- Open PDF Button -->
                        </div>
                        <button class="btn btn-success" style="margin-top: 10px;" onclick="openBook(@borrowed.Book.Id)">Open PDF</button>

                    </div>

                }
            }
            else
            {
                <p>No borrowed books to display.</p>
            }
        </div>


    }
    @*Need to add the ability that only logged users can see this.*@
    <div class="container__right">
        <h1>Customer Reviews</h1>
        <div class="horizontal-scroll" id="reviewsContainer">
            <!-- Reviews will be dynamically added here via JavaScript -->
        </div>
    </div>


</body>
<script>
    function downloadBook(bookId) {
        const format = document.getElementById(`format-${bookId}`).value;

        // Construct the file URL
        const downloadUrl = `/Ebook_libary_Home/GetBookFilePath?bookId=${bookId}&format=${format}`;

        // Use a link element to trigger the download
        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = ''; // Optional: Filename is determined by the server
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }


    function openBook(bookId) {
        // Create a URL pointing to the controller action
        const openUrl = `/Ebook_libary_Home/GetBookFilePath?bookId=${bookId}&format=pdf`;

        // Open the PDF in a new tab
       window.open(openUrl, '_blank');
    }



    function confirmRemoveBoughtBook(bookId) {
        if (confirm("Are you sure you want to remove this book?")) {
            $.ajax({
                url: '/Ebook_libary_Home/RemoveBoughtBook',
                type: 'POST',
                data: { bookId: bookId },
                success: function (response) {
                    alert(response.message);
                    if (response.success) {
                        location.reload();
                    }
                },
                error: function () {
                    alert("An error occurred while removing the book.");
                }
            });
        }
    }

    function confirmReturnBook(bookId) {
        if (confirm("Are you sure you want to return this book?")) {
            $.ajax({
                url: '/Ebook_libary_Home/ReturnBook',
                type: 'POST',
                data: { bookId: bookId },
                success: function (response) {
                    alert(response.message);
                    if (response.success) {
                        location.reload();
                    }
                },
                error: function () {
                    alert("An error occurred while returning the book.");
                }
            });
        }
    }

    function fetchSuggestions() {
        const query = document.getElementById('searchInput').value;

        if (query.length > 2) { // Fetch suggestions after 3 characters
            fetch(`/GetBookSuggestions?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(data => {
                    const suggestionList = document.getElementById('suggestionList');
                    suggestionList.innerHTML = ''; // Clear previous suggestions

                    data.forEach(book => {
                        const listItem = document.createElement('li');
                        listItem.textContent = `${book.Title} by ${book.Author}`;
                        listItem.onclick = () => {
                            document.getElementById('searchInput').value = book.Title; // Set search box value
                            suggestionList.innerHTML = ''; // Clear suggestions
                        };
                        suggestionList.appendChild(listItem);
                    });
                })
                .catch(error => console.error('Error fetching suggestions:', error));
        }
    }

    document.getElementById('searchForm').addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent default form submission

        const searchTerm = document.getElementById('searchInput').value;

        if (!searchTerm) {
            alert("Please enter a search term.");
            return;
        }

        fetch(`/Ebook_libary_Home/SearchBooks`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ searchTerm }), // Send the search term as JSON
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log("Search Results:", data); // Debugging
                const scrollMenu = document.querySelector('.scrollmenu');
                scrollMenu.innerHTML = ''; // Clear existing recommended books

                if (data.error) {
                    scrollMenu.innerHTML = `<p>${data.message}</p>`;
                    return;
                }

                if (data.length === 0) {
                    scrollMenu.innerHTML = `<p>No books found for the search term "${searchTerm}".</p>`;
                    return;
                }

                // Update the recommended books with the fetched list
                data.forEach(book => {
                    const column = document.createElement('div');
                    column.className = 'column';
                    column.innerHTML = `
                    <a href="/User/BookPage/${book.Id}" style="text-decoration: none; color: inherit;">
                        <h3>${book.Name}</h3>
                        <p>Author: ${book.Author}</p>
                        <p>Category: ${book.Category}</p>
                        <p>Minimum Age: ${book.minage}</p>
                        <p>Buying Price: ${book.BuyingPrice}</p>
                        ${book.Sale > 0
                            ? `
                            <p style="text-decoration: line-through; color: red;">Original Price: ${book.BuyingPrice}</p>
                            <p style="color: green;">Discounted Price: ${book.DiscountedPrice}</p>`
                            : ''}
                        <p>Borrow Price: ${book.BorrowPrice}</p>
                    </a>
                `;
                    scrollMenu.appendChild(column);
                });
            })
            .catch(error => {
                console.error('Error fetching books:', error);
                alert("An error occurred while searching for books.");
            });
    });

    document.getElementById('filterForm').addEventListener('submit', function (e) {
        e.preventDefault(); // Prevent default form submission

        const genre = document.getElementById('genre').value;
        const priceOrder = document.getElementById('priceOrder').value;

        const filters = {
            genre,
            priceOrder,
        };

        fetch(`/Ebook_libary_Home/FilterBooks`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(filters),
        })
            .then(response => response.json())
            .then(data => {
                const scrollMenu = document.querySelector('.scrollmenu');
                scrollMenu.innerHTML = ''; // Clear existing books

                if (data.error) {
                    scrollMenu.innerHTML = `<p>${data.message}</p>`;
                    return;
                }

                if (data.length === 0) {
                    scrollMenu.innerHTML = `<p>No books match the filter criteria.</p>`;
                    return;
                }

                data.forEach(book => {
                    const column = document.createElement('div');
                    column.className = 'column';
                    column.innerHTML = `
                    <a href="/User/BookPage/${book.Id}" style="text-decoration: none; color: inherit;">
                        <h3>${book.Name}</h3>
                        <p>Author: ${book.Author}</p>
                        <p>Category: ${book.Category}</p>
                        <p>Minimum Age: ${book.minage}</p>
                        <p>Buying Price: ${book.BuyingPrice}</p>
                        ${book.Sale > 0
                            ? `
                            <p style="text-decoration: line-through; color: red;">Original Price: ${book.BuyingPrice}</p>
                            <p style="color: green;">Discounted Price: ${book.DiscountedPrice}</p>`
                            : ''}
                        <p>Borrow Price: ${book.BorrowPrice}</p>
                    </a>
                `;
                    scrollMenu.appendChild(column);
                });
            })
            .catch(error => {
                console.error('Error applying filters:', error);
                alert("An error occurred while applying filters.");
            });
    });

    document.addEventListener("DOMContentLoaded", function() {
    fetchReviews();
});

// Function to fetch web reviews
function fetchReviews() {
    fetch("/Ebook_libary_Home/getwebreviews") // Replace with the correct URL to your backend action
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                displayReviews(data.data);
            } else {
                console.error('Failed to load reviews');
            }
        })
        .catch(error => {
            console.error('Error fetching reviews:', error);
        });
}

    function displayReviews(reviews) {
        const reviewsContainer = document.getElementById('reviewsContainer');
        reviewsContainer.innerHTML = ''; // Clear any existing content

        // Loop through reviews and create HTML dynamically
        reviews.forEach((review) => {
            // Create a review card
            const reviewCard = document.createElement('div');
            reviewCard.classList.add('review-card'); // Apply the reusable CSS class

            // Set the inner HTML of the review card
            reviewCard.innerHTML = `
            <div class="card__content">
                <span><i class="ri-double-quotes-l"></i></span>
                <div class="card__details">
                    <p>${review.ReviewText}</p>
                    <h4>Username: ${review.username}</h4>
                </div>
            </div>
        `;

            // Append the review card to the container
            reviewsContainer.appendChild(reviewCard);
        });
    }

</script>
</html>
